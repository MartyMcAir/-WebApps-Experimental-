<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/data/jpa
        https://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- https://spring.io/blog/2011/02/10/getting-started-with-spring-data-jpa -->
    <!-- This scans all packages below com.acme.repositories for interfaces extending JpaRepository
    and creates a Spring bean for it that is backed by an implementation of SimpleJpaRepository -->
    <jpa:repositories base-package="com.repositories"/>

    <!--     Use in-memory embedded H2 database -->
    <jdbc:embedded-database id="dataSource" type="H2">
        <!--        <jdbc:script location="classpath:create-db.sql" />-->
        <!--        <jdbc:script location="classpath:insert-data2.sql" />-->
    </jdbc:embedded-database>

    <!--@Transaction annotation support -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--Обеспечивает работу с транзакциями в Spring -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--   ___   Hibernate   ___   -->
    <!-- Database managed by Hibernate EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="UsersPU"/>
        <property name="dataSource" ref="dataSource"/>

        <property name="packagesToScan"> <!--поиск сущностей в этом пакете-->
            <list>
                <value>com.model</value>
            </list>
        </property>

        <!--Поставщик данных - hibernate-->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
        </property>

        <!--детали конфигурации поставщика (hibernate) -->
        <property name="jpaProperties">
            <map>
                <entry key="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
                <entry key="hibernate.hbm2ddl.auto" value="create"/>
                <!--                <entry key="hibernate.hbm2ddl.import_files" value="/import_data.sql"/>-->
                <entry key="hibernate.show_sql" value="true"/>

                <!--   additional setting (for optimization performance)   -->
                <entry key="hibernate.max_fetch_depth" value="3"/>
                <entry key="hibernate.jdbc.fetch_size" value="50"/>
                <entry key="hibernate.jdbc.batch_size" value="10"/>
            </map>
        </property>
    </bean>

    <!--   new   -->
    <!-- тут можно юзать и  Tomcat JDBC Connection Pooling -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.eventGeneratedId}"/>
        <property name="password" value="${jdbc.pass}"/>
    </bean>

</beans>