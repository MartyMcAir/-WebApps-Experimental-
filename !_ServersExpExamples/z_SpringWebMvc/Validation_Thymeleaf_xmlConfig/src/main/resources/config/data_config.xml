<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:jpa="http://www.springframework.org/schema/data/jpa"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="
		http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/data/jpa
        https://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
">

    <!-- https://spring.io/blog/2011/02/10/getting-started-with-spring-data-jpa -->
    <!-- This scans all packages below com.acme.repositories for interfaces extending JpaRepository
    and creates a Spring bean for it that is backed by an implementation of SimpleJpaRepository -->
    <jpa:repositories base-package="com.repositories"/>

    <!--@Transaction annotation support -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Use in-memory embedded H2 database -->
    <jdbc:embedded-database id="dataSource" type="H2">
        <!--        <jdbc:script location="classpath:create-db.sql" />-->
        <!--        <jdbc:script location="classpath:insert-data2.sql" />-->
    </jdbc:embedded-database>

    <!--Обеспечивает работу с транзакциями в Spring -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!--   ___   H2   ___   -->
    <!-- Run H2 web server within application that will access the same in-memory database -->
    <bean id="h2Server" class="org.h2.tools.Server" factory-method="createTcpServer" init-method="start"
          destroy-method="stop" depends-on="h2WebServer">
        <constructor-arg value="-tcp,-tcpAllowOthers,-tcpPort,9092"/>
    </bean>
    <bean id="h2WebServer" class="org.h2.tools.Server" factory-method="createWebServer" init-method="start"
          destroy-method="stop">
        <constructor-arg value="-web,-webAllowOthers,-webPort,8082"/>
    </bean>

    <!--    OR      -->
    <!-- Datasource. Источник данных - база MySQL -->
    <!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <!--        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>-->
    <!--        <property name="url" value="jdbc:mysql://localhost:3306/javastudy"/>-->
    <!--    value="org.h2.Driver" -->
    <!--   value="jdbc:h2:mem:test" -->
    <!--        <property name="username" value="sa"/>-->
    <!--        <property name="password" value=""/>-->
    <!--    </bean>-->

    <!--   ___   Hibernate   ___   -->
    <!-- Database managed by Hibernate EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="UsersPU"/>
        <property name="dataSource" ref="dataSource"/>
        <!--поиск сущностей в этом пакете-->
        <property name="packagesToScan">
            <list>
                <value>com.model</value>
            </list>
        </property>

        <!--Поставщик данных - hibernate-->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
        </property>

        <!--детали конфигурации поставщика (hibernate) -->
        <property name="jpaProperties">
            <map>
                <entry key="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
                <entry key="hibernate.hbm2ddl.auto" value="create"/>
                <!--                <entry key="hibernate.hbm2ddl.import_files" value="/import_data.sql"/>-->
                <entry key="hibernate.hbm2ddl.import_files" value="/db/h2/import_data.sql"/>
                <entry key="hibernate.show_sql" value="true"/>

                <!--   additional setting (for optimization performance)   -->
                <entry key="hibernate.max_fetch_depth" value="3"/>
                <entry key="hibernate.jdbc.fetch_size" value="50"/>
                <entry key="hibernate.jdbc.batch_size" value="10"/>
            </map>
        </property>
    </bean>

</beans>